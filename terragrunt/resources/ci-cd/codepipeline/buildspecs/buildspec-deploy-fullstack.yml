version: 0.2

phases:
  install:
    commands:
      - echo "Installing kubectl..."
      - curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.27.1/2023-04-19/bin/linux/amd64/kubectl
      - chmod +x ./kubectl
      - mv ./kubectl /usr/local/bin
      - echo "Installing jq..."
      - yum install -y jq
      - echo "Verifying installations..."
      - kubectl version --client
      - jq --version
  pre_build:
    commands:
      - echo "Deploy phase started on $(date)"
      - echo "Configuring kubectl for EKS cluster..."
      - aws eks update-kubeconfig --region $AWS_DEFAULT_REGION --name $EKS_CLUSTER_NAME
      - echo "Verifying cluster connection..."
      - kubectl get nodes
      - echo "Getting image info from build artifacts..."
      - |
        # Initialize variables
        API_IMAGE_URI=""
        FRONTEND_IMAGE_URI=""
        IMAGE_TAG=""
        
        # Try to read API build info
        if [ -f "api-build-info.json" ]; then
          echo "Found api-build-info.json:"
          cat api-build-info.json
          API_IMAGE_URI=$(cat api-build-info.json | jq -r ".api_image_uri")
          IMAGE_TAG=$(cat api-build-info.json | jq -r ".image_tag")
        fi
        
        # Try to read Frontend build info
        if [ -f "frontend-build-info.json" ]; then
          echo "Found frontend-build-info.json:"
          cat frontend-build-info.json
          FRONTEND_IMAGE_URI=$(cat frontend-build-info.json | jq -r ".frontend_image_uri")
          if [ -z "$IMAGE_TAG" ]; then
            IMAGE_TAG=$(cat frontend-build-info.json | jq -r ".image_tag")
          fi
        fi
        
        # Fallback to environment variables if files not found
        if [ -z "$API_IMAGE_URI" ] || [ -z "$FRONTEND_IMAGE_URI" ]; then
          echo "Build info files not found or incomplete, generating from environment variables..."
          COMMIT_HASH=$(echo ${CODEBUILD_RESOLVED_SOURCE_VERSION:-latest} | cut -c 1-7)
          IMAGE_TAG=${COMMIT_HASH:-latest}
          if [ -z "$API_IMAGE_URI" ]; then
            API_IMAGE_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:api-${IMAGE_TAG}
          fi
          if [ -z "$FRONTEND_IMAGE_URI" ]; then
            FRONTEND_IMAGE_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:frontend-${IMAGE_TAG}
          fi
        fi
        
        echo "Final image URIs:"
        echo "API Image URI = $API_IMAGE_URI"
        echo "Frontend Image URI = $FRONTEND_IMAGE_URI"
        echo "Image Tag = $IMAGE_TAG"
  build:
    commands:
      - echo "Updating Kubernetes manifests..."
      - cd k8s/manifests
      
      # Update API deployment if API image is available
      - |
        if [ -n "$API_IMAGE_URI" ]; then
          echo "Updating API deployment..."
          echo "Original API deployment.yaml:"
          cat deployment.yaml
          sed -i "s|image:.*|image: ${API_IMAGE_URI}|g" deployment.yaml
          echo "Updated API deployment.yaml:"
          cat deployment.yaml
          echo "Applying API manifests..."
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml
        else
          echo "No API image URI found, skipping API deployment update"
        fi
      
      # Update Frontend deployment if Frontend image is available
      - |
        if [ -n "$FRONTEND_IMAGE_URI" ]; then
          echo "Updating Frontend deployment..."
          echo "Original Frontend deployment:"
          cat frontend-complete.yaml
          sed -i "s|<ECR_REPOSITORY_URI>/festivos-frontend:latest|${FRONTEND_IMAGE_URI}|g" frontend-complete.yaml
          echo "Updated Frontend deployment:"
          cat frontend-complete.yaml
          echo "Applying Frontend manifests..."
          kubectl apply -f frontend-complete.yaml
        else
          echo "No Frontend image URI found, skipping Frontend deployment update"
        fi
      
      # Deploy/Update combined ingress
      - echo "Applying combined ingress..."
      - kubectl delete ingress festivos-api-ingress-alb -n festivos-api --ignore-not-found=true
      - kubectl apply -f app-ingress-alb.yaml
      
  post_build:
    commands:
      - echo "Waiting for deployments to complete..."
      
      # Wait for API deployment if it was updated
      - |
        if [ -n "$API_IMAGE_URI" ]; then
          echo "Waiting for API deployment to complete..."
          kubectl rollout status deployment/festivos-api -n festivos-api --timeout=300s
          kubectl get pods -n festivos-api -l app=festivos-api
        fi
      
      # Wait for Frontend deployment if it was updated
      - |
        if [ -n "$FRONTEND_IMAGE_URI" ]; then
          echo "Waiting for Frontend deployment to complete..."
          kubectl rollout status deployment/festivos-frontend -n festivos-api --timeout=300s
          kubectl get pods -n festivos-api -l app=festivos-frontend
        fi
      
      - echo "Verifying services and ingress..."
      - kubectl get service -n festivos-api
      - kubectl get ingress -n festivos-api
      
      - echo "Getting ALB URL..."
      - ALB_URL=$(kubectl get ingress -n festivos-api festivos-app-ingress-alb -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "ALB URL not ready yet")
      - echo "ALB URL = $ALB_URL"
      - echo "Frontend URL = http://$ALB_URL"
      - echo "API URL = http://$ALB_URL/api"
      
      - echo "Deployment completed successfully on $(date)"
      - echo "Creating deployment summary..."
      - printf "{\"deployment_time\":\"%s\",\"api_image_uri\":\"%s\",\"frontend_image_uri\":\"%s\",\"image_tag\":\"%s\",\"alb_url\":\"%s\",\"frontend_url\":\"http://%s\",\"api_url\":\"http://%s/api\",\"status\":\"success\"}" "$(date)" "$API_IMAGE_URI" "$FRONTEND_IMAGE_URI" "$IMAGE_TAG" "$ALB_URL" "$ALB_URL" "$ALB_URL" > deployment-summary.json
      - cat deployment-summary.json

artifacts:
  files:
    - deployment-summary.json
  name: DeployArtifact
