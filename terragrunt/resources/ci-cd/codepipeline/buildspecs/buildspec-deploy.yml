version: 0.2

phases:
  install:
    commands:
      - echo "Installing kubectl..."
      - curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.27.1/2023-04-19/bin/linux/amd64/kubectl
      - chmod +x ./kubectl
      - mv ./kubectl /usr/local/bin
      - echo "Installing jq..."
      - yum install -y jq
      - echo "Verifying installations..."
      - kubectl version --client
      - jq --version
  pre_build:
    commands:
      - echo "Deploy phase started on $(date)"
      - echo "Configuring kubectl for EKS cluster..."
      - aws eks update-kubeconfig --region $AWS_DEFAULT_REGION --name $EKS_CLUSTER_NAME
      - echo "Verifying cluster connection..."
      - kubectl get nodes
      - echo "Getting image info..."
      - |
        if [ -f "build-info.json" ]; then
          echo "Found build-info.json, reading image info from file..."
          cat build-info.json
          IMAGE_URI=$(cat build-info.json | jq -r ".image_uri")
          IMAGE_TAG=$(cat build-info.json | jq -r ".image_tag")
        else
          echo "build-info.json not found, generating image info from environment variables..."
          COMMIT_HASH=$(echo ${CODEBUILD_RESOLVED_SOURCE_VERSION:-latest} | cut -c 1-7)
          IMAGE_TAG=${COMMIT_HASH:-latest}
          IMAGE_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG}
          echo "Generated image info:"
          printf '{"image_uri":"%s","image_tag":"%s","commit_hash":"%s","build_time":"%s"}' "$IMAGE_URI" "$IMAGE_TAG" "$COMMIT_HASH" "$(date)"
        fi
      - echo "Image URI = $IMAGE_URI"
      - echo "Image Tag = $IMAGE_TAG"
  build:
    commands:
      - echo "Updating Kubernetes manifests..."
      - cd k8s/manifests
      - echo "Original deployment.yaml:"
      - cat deployment.yaml
      - echo "Updating image in deployment.yaml..."
      # - sed -i "s|image:.*|image: ${IMAGE_URI}|g" deployment.yaml
      - echo "Updated deployment.yaml:"
      - cat deployment.yaml
      - echo "Applying application manifests..."
      - kubectl apply -f deployment.yaml
      - kubectl apply -f service.yaml
      - kubectl apply -f ingress-alb.yaml
  post_build:
    commands:
      - echo "Waiting for deployment to complete..."
      - kubectl rollout status deployment/festivos-api -n festivos-api --timeout=300s
      - echo "Verifying deployment..."
      - kubectl get pods -n festivos-api -l app=festivos-api
      - kubectl get service -n festivos-api festivos-api-service
      - kubectl get ingress -n festivos-api festivos-api-ingress-alb
      - echo "Getting ALB URL..."
      - ALB_URL=$(kubectl get ingress -n festivos-api festivos-api-ingress-alb -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "ALB URL not ready yet")
      - echo "ALB URL = $ALB_URL"
      - echo "Deployment completed successfully on $(date)"
      - echo "Creating deployment summary..."
      - printf "{\"deployment_time\":\"%s\",\"image_uri\":\"%s\",\"image_tag\":\"%s\",\"alb_url\":\"%s\",\"status\":\"success\"}" "$(date)" "$IMAGE_URI" "$IMAGE_TAG" "$ALB_URL" > deployment-summary.json
      - cat deployment-summary.json

artifacts:
  files:
    - deployment-summary.json
  name: DeployArtifact