version: 0.2

phases:
  install:
    commands:
      - echo "Installing jq..."
      - yum install -y jq
      - echo "Installing Node.js 18..."
      - curl -fsSL https://rpm.nodesource.com/setup_18.x | bash -
      - yum install -y nodejs
      - node --version
      - npm --version

  pre_build:
    commands:
      - echo "Logging in to Docker Hub..."
      - DOCKERHUB_CREDENTIALS=$(aws secretsmanager get-secret-value --secret-id "$DOCKERHUB_SECRET_ARN" --query SecretString --output text)
      - DOCKERHUB_USERNAME=$(echo $DOCKERHUB_CREDENTIALS | jq -r .username)
      - DOCKERHUB_PASSWORD=$(echo $DOCKERHUB_CREDENTIALS | jq -r .password)
      - echo $DOCKERHUB_PASSWORD | docker login --username $DOCKERHUB_USERNAME --password-stdin

      - echo "Docker version:"
      - docker --version
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      - echo "Repository URI = $REPOSITORY_URI"
      - echo "Image tag = $IMAGE_TAG"
      - echo "Sequential Build started on `date`"
  
  build:
    commands:
      - echo "Sequential Build phase started on `date`"
      
      # Build API first
      - echo "Building the API Docker image..."
      - cd TT_ANI_apiFestivos
      - docker build -t $IMAGE_REPO_NAME:api-$IMAGE_TAG .
      - docker tag $IMAGE_REPO_NAME:api-$IMAGE_TAG $REPOSITORY_URI:api-$IMAGE_TAG
      - docker tag $IMAGE_REPO_NAME:api-$IMAGE_TAG $REPOSITORY_URI:api-latest
      - echo "API Docker image built successfully"
      - cd ..
      
      # Build Frontend second
      - echo "Building the Frontend Docker image..."
      - cd frontendFestivos
      - docker build -t $IMAGE_REPO_NAME:frontend-$IMAGE_TAG .
      - docker tag $IMAGE_REPO_NAME:frontend-$IMAGE_TAG $REPOSITORY_URI:frontend-$IMAGE_TAG
      - docker tag $IMAGE_REPO_NAME:frontend-$IMAGE_TAG $REPOSITORY_URI:frontend-latest
      - echo "Frontend Docker image built successfully"
      - cd ..
  
  post_build:
    commands:
      - echo "Build completed on `date`"
      
      # Push API images
      - echo "Pushing the API Docker images..."
      - docker push $REPOSITORY_URI:api-$IMAGE_TAG
      - docker push $REPOSITORY_URI:api-latest
      - echo "API Docker images pushed successfully"
      
      # Push Frontend images
      - echo "Pushing the Frontend Docker images..."
      - docker push $REPOSITORY_URI:frontend-$IMAGE_TAG
      - docker push $REPOSITORY_URI:frontend-latest
      - echo "Frontend Docker images pushed successfully"
      
      - echo "Writing image definitions file..."
      - printf '[{"name":"festivos-api","imageUri":"%s"},{"name":"festivos-frontend","imageUri":"%s"}]' $REPOSITORY_URI:api-$IMAGE_TAG $REPOSITORY_URI:frontend-$IMAGE_TAG > imagedefinitions.json
      - cat imagedefinitions.json
      - echo "Creating build info file..."
      - printf '{"api_image_uri":"%s","frontend_image_uri":"%s","image_tag":"%s","commit_hash":"%s","build_time":"%s"}' $REPOSITORY_URI:api-$IMAGE_TAG $REPOSITORY_URI:frontend-$IMAGE_TAG $IMAGE_TAG $COMMIT_HASH "$(date)" > build-info.json
      - cat build-info.json

artifacts:
  files:
    - imagedefinitions.json
    - build-info.json
    - k8s/**/*
    - terragrunt/resources/ci-cd/codepipeline/buildspecs/buildspec-deploy-fullstack.yml
  name: BuildArtifact
