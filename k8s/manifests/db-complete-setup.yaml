apiVersion: batch/v1
kind: Job
metadata:
  name: db-complete-setup
  namespace: festivos-api
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: db-setup
        image: postgres:17-alpine
        env:
        - name: PGHOST
          valueFrom:
            secretKeyRef:
              name: rds-secret
              key: DB_HOST
        - name: PGPORT
          valueFrom:
            secretKeyRef:
              name: rds-secret
              key: DB_PORT
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              name: rds-secret
              key: DB_USERNAME
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: rds-secret
              key: DB_PASSWORD
        - name: PGDATABASE
          value: "festivos"
        command:
        - /bin/bash
        - -c
        - |
          echo "üöÄ Setup completo de base de datos para '$PGDATABASE'..."
          
          # Esperar a que la base de datos est√© disponible
          until pg_isready -h $PGHOST -p $PGPORT -U $PGUSER; do
            echo "Esperando PostgreSQL en $PGHOST..."
            sleep 2
          done
          
          echo "‚úÖ PostgreSQL listo!"
          
          # PASO 1: Limpieza completa de tablas existentes
          echo "üßπ Limpiando tablas si existen..."
          psql -h $PGHOST -p $PGPORT -U $PGUSER -d "$PGDATABASE" -c "
            DROP TABLE IF EXISTS festivo CASCADE;
            DROP TABLE IF EXISTS tipo CASCADE;
            DROP TABLE IF EXISTS pais CASCADE;
          "
          
          echo "‚úÖ Esquema limpio!"
          
          # PASO 2: Crear el esquema de tablas (DDL)
          echo "üèóÔ∏è Creando tablas..."
          psql -h $PGHOST -p $PGPORT -U $PGUSER -d "$PGDATABASE" -c "
            CREATE TABLE Tipo(
              Id SERIAL PRIMARY KEY,
              Tipo VARCHAR(100) NOT NULL
            );

            CREATE TABLE Pais(
              Id SERIAL PRIMARY KEY,
              Nombre VARCHAR(100) NOT NULL
            );

            CREATE TABLE Festivo(
              Id SERIAL PRIMARY KEY,
              Nombre VARCHAR(100) NOT NULL,
              Dia INT NOT NULL,
              Mes INT NOT NULL,
              DiasPascua INT NOT NULL,
              IdTipo INT NOT NULL,
              CONSTRAINT fkFestivo_Tipo FOREIGN KEY (IdTipo) REFERENCES Tipo(Id),
              IdPais INT NOT NULL,
              CONSTRAINT fkFestivo_Pais FOREIGN KEY (IdPais) REFERENCES Pais(Id)
            );
          "
          
          echo "‚úÖ Tablas creadas!"
          
          # PASO 3: Insertar datos desde el ConfigMap
          echo "üìù Insertando datos (DML)..."
          psql -h $PGHOST -p $PGPORT -U $PGUSER -d "$PGDATABASE" -f /scripts/dml-festivos.sql
          
          echo "üéâ Datos insertados!"
          
          # PASO 4: Verificar datos
          echo "üîç Verificando datos insertados:"
          echo "Total de tipos:"
          psql -h $PGHOST -p $PGPORT -U $PGUSER -d "$PGDATABASE" -c "SELECT COUNT(*) FROM Tipo;"
          echo "Total de pa√≠ses:"
          psql -h $PGHOST -p $PGPORT -U $PGUSER -d "$PGDATABASE" -c "SELECT COUNT(*) FROM Pais;"
          echo "Total de festivos:"
          psql -h $PGHOST -p $PGPORT -U $PGUSER -d "$PGDATABASE" -c "SELECT COUNT(*) FROM Festivo;"
          
          echo "‚úÖ Base de datos '$PGDATABASE' completamente configurada!"
        volumeMounts:
        - name: sql-scripts
          mountPath: /scripts
          readOnly: true
      volumes:
      - name: sql-scripts
        configMap:
          name: sql-scripts-original
  backoffLimit: 1
